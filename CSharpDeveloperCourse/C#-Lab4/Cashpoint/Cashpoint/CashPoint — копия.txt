using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml;
using System.IO;

namespace Cashpoint
{
    [Serializable]
    public sealed class CashPoint
    {
        [DataMember(Name = "banknotes")]
        //private List<uint> banknotes = new List<uint>();
        private Hashtable banknotes = new Hashtable();

        [NonSerialized]
        private uint total = 0;

        [NonSerialized]
        private bool[] granted = { true };



        public static CashPoint LoadFromXmlFile(string filename)
        {
            if (string.IsNullOrEmpty(filename))
            {
                throw new ArgumentException("Should be not null", "filename");
            }

            using (var stream = new FileStream(filename, FileMode.Open))
            {
                var xmlSerializer = new DataContractSerializer(typeof(CashPoint));
                var cashpoint = (CashPoint)xmlSerializer.ReadObject(stream);

                cashpoint.total = 0;
                foreach (DictionaryEntry banknote in cashpoint.banknotes)
                {
                    cashpoint.total += (uint)(banknote.Key) * Convert.ToByte(banknote.Value);
                }

                cashpoint.CalculateGrants();

                return cashpoint;
            }
        }

        public void SaveToXmlFile(string filename)
        {
            using (var writer = XmlWriter.Create(filename,
                new XmlWriterSettings { Indent = true }))
            {
                var xmlSerializer = new DataContractSerializer(typeof(CashPoint));
                xmlSerializer.WriteObject(writer, this);
            }
        }

        public void AddBanknote(uint value)
        {
            if (!banknotes.Contains(value))
            {
                this.banknotes[value] = 1;
            }
            else
            {
                this.banknotes[value] = Convert.ToByte(this.banknotes[value]) + 1;
            }

            this.total += value;
            this.CalculateGrants();
        }

        public void AddBanknote(uint value, byte count)
        {
            if(count != 0)
            {
                if (!banknotes.Contains(value))
                {
                    this.banknotes[value] = count;
                }
                else
                {
                    this.banknotes[value] = Convert.ToByte(this.banknotes[value]) + count;
                    //this.banknotes.Add(value, 1);
                }

                this.total += value * count;

                this.CalculateGrants();
            }
        }

        public void RemoveBanknote(uint value)
        {
            if (this.banknotes.Contains(value))
            {
                if (Convert.ToByte(this.banknotes[value]) > 1)
                {
                    this.banknotes[value] = Convert.ToByte(this.banknotes[value]) - 1;
                }
                else
                {
                    this.banknotes.Remove(value);
                }

                this.total -= value;

                this.CalculateGrants();
            }
        }

        public void RemoveBanknote(uint value, byte count)
        {
            if (this.banknotes.Contains(value) && count != 0)
            {
                if (Convert.ToByte(this.banknotes[value]) > count)
                {
                    this.banknotes[value] = Convert.ToByte(this.banknotes[value]) - count;
                }
                else if(Convert.ToByte(this.banknotes[value]) == count)
                {
                    this.banknotes.Remove(value);
                }
                else
                {
                    throw new Exception();
                }

                this.total -= value * count;

                this.CalculateGrants();
            }
        }

        public bool CanGrant(uint value)
        {
            this.CalculateGrants();

            if (value > this.total)
            {
                return false;
            }

            return this.granted[(int)value];
        }

        public uint Total
        {
            get
            {
                return this.total;
            }
        }

        public int Count
        {
            get
            {
                var count = 0;
                foreach (DictionaryEntry banknote in this.banknotes)
                {
                    count += Convert.ToInt32(banknote.Value);
                }

                return count;
            }
        }

        private void CalculateGrants()
        {
            this.granted = new bool[this.total + 1];
            this.granted[0] = true;

            foreach (DictionaryEntry banknote in this.banknotes)
            {
                for (var i = (int)this.total; i >= 0; i--)
                {
                    if (this.granted[i])
                    {
                        for (var b = Convert.ToUInt32(banknote.Key);
                            b <= Convert.ToUInt32(banknote.Key) * Convert.ToByte(banknote.Value);
                            b += b)
                        {
                            this.granted[i + b] = true;
                        }
                    }
                }
            }
        }
    }
}